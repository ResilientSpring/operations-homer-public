prefix-list bgp-out {
    {% for network in bgp_out %}
    {{ network }};
    {% endfor %}
}
prefix-list bgp6-out {
    {% for network in bgp6_out %}
    {{ network }};
    {% endfor %}
}
prefix-list LVS-service-ips {
    {% for network in lvs %}
    {{ network }};
    {% endfor %}
}
prefix-list LVS-service-ips6 {
    {% for network in lvs6 %}
    {{ network }};
    {% endfor %}
}
prefix-list wikimedia4 {
    91.198.174.0/24;
    185.15.56.0/22;
    198.35.26.0/23;
    208.80.152.0/22;
}
prefix-list wikimedia6 {
    2620:0:860::/46;
    2a02:ec80::/32;
}
prefix-list private4 {
    10.0.0.0/8;
}
prefix-list private6 {
    2620:0:860:100::/56;
    2620:0:861:100::/56;
    2620:0:862:100::/56;
    2620:0:863:100::/56;
}
/* http://www.team-cymru.org/Services/Bogons/bogon-bn-nonagg.txt */
prefix-list special-ranges4 {
    0.0.0.0/8;
    10.0.0.0/8;
    100.64.0.0/10;
    127.0.0.0/8;
    169.254.0.0/16;
    172.16.0.0/12;
    192.0.0.0/24;
    192.0.2.0/24;
    192.168.0.0/16;
    198.18.0.0/15;
    198.51.100.0/24;
    203.0.113.0/24;
    233.252.0.0/24;
    240.0.0.0/4;
}
/* http://www.iana.org/assignments/ipv6-address-space/ipv6-address-space.xhtml */
prefix-list special-ranges6 {
    /* RFC 4291 (v4mapped) */
    0000::/8;
    /* RFC 6666 (reserved for Discard-Only Address Block) */
    0100::/64;
    /* RFC 4048 (formerly NSAP-mapped prefix set) */
    0200::/7;
    /* RFC 3849 documentation */
    2001:db8::/32;
    /* RFC 3701 (6bone) */
    3ffe::/16;
    /* RFC 3879 (Site Local Unicast) */
    fec0::/10;
    /* RFC4193 (ULA) */
    fc00::/7;
    /* from http://www.team-cymru.org/Services/Bogons/fullbogons-ipv6.txt */
    100::/8;
    400::/6;
    800::/5;
    1000::/4;
    fe00::/9;
}
prefix-list trusted-space4 {
}
prefix-list trusted-space6 {
}
prefix-list bgp-sessions {
    apply-path "protocols bgp group <*> neighbor <*>";
}
prefix-list system-ntp {
    apply-path "system ntp server <*>";
}
prefix-list system-nameservers {
    apply-path "system name-server <*>";
}
prefix-list loopback4 {
    apply-path "interfaces lo0 unit 0 family inet address <*/32>";
}
prefix-list loopback6 {
    apply-path "interfaces lo0 unit 0 family inet6 address <*/128>";
}
{% include "includes/policies/" ~ site ~ "-transits.conf" %}

policy-statement BGP6_outfilter {
    term aggregates_out {
        from {
            protocol aggregate;
            prefix-list bgp6-out;
        }
        then accept;
    }
    term customers {
        from community PEER_CUSTOMER;
        then accept;
    }
    then reject;
}
policy-statement BGP_Customer_in {
    term filter {
        from as-path-group AS-PATH-FILTER;
        then reject;
    }
    term avoid-paths {
        from as-path-group AVOID-PATHS;
        then {
            community add AVOIDED_PATH;
        }
    }
    then {
        community add PEER_CUSTOMER;
        default-action accept;
    }
}
policy-statement BGP_Customer_out {
    term private_or_invalid4 {
        from {
            prefix-list-filter private4 orlonger;
            prefix-list-filter special-ranges4 orlonger;
        }
        then reject;
    }
    term private_or_invalid6 {
        from {
            prefix-list-filter private6 orlonger;
            prefix-list-filter special-ranges6 orlonger;
        }
        then reject;
    }
    term internal4 {
        from {
            prefix-list-filter wikimedia4 longer;
        }
        then reject;
    }
    term internal6 {
        from {
            prefix-list-filter wikimedia6 longer;
        }
        then reject;
    }
    term aggregates4 {
        from {
            family inet;
            protocol [ aggregate ospf ];
            prefix-list wikimedia4;
        }
        then accept;
    }
    term aggregates6 {
        from {
            family inet6;
            protocol [ aggregate ospf3 ];
            prefix-list wikimedia6;
        }
        then accept;
    }
    term bgp {
        from protocol bgp;
        then accept;
    }
    then reject;
}
policy-statement BGP_Default {
    term default {
        from {
            route-filter 0.0.0.0/0 exact;
        }
        then accept;
    }
    then reject;
}
policy-statement BGP_IXP6_out {
    term next-hop-self {
        then {
            next-hop self;
        }
    }
    term bgp-out {
        from policy BGP6_outfilter;
        then accept;
    }
    then reject;
}
policy-statement BGP_IXP_in {
    term filter {
        from as-path-group AS-PATH-FILTER;
        then reject;
    }
    term avoid-paths {
        from as-path-group AVOID-PATHS;
        then {
            community add AVOIDED_PATH;
        }
    }
    then {
        local-preference 250;
        community add PEERING_ROUTE;
        default-action accept;
    }
}
policy-statement BGP_IXP_out {
    term next-hop-self {
        then {
            next-hop self;
        }
    }
    term bgp-out {
        from policy BGP_outfilter;
        then accept;
    }
    then reject;
}
policy-statement BGP_Private_Peer_in {
    term filter {
        from as-path-group AS-PATH-FILTER;
        then reject;
    }
    term avoid-paths {
        from as-path-group AVOID-PATHS;
        then {
            community add AVOIDED_PATH;
        }
    }
    then {
        local-preference 250;
        community add PEER_PRIVATE_PEER;
        default-action accept;
    }
}
policy-statement BGP_Wikimedia_own_space {
    term local4 {
        from policy BGP_outfilter;
        then accept;
    }
    term local6 {
        from policy BGP6_outfilter;
        then accept;
    }
    then reject;
}
policy-statement BGP_Wikimedia_no_dfz {
    term private4 {
        from {
            protocol bgp;
            prefix-list-filter private4 orlonger;
        }
        then accept;
    }
    term public4 {
        from {
            protocol bgp;
            prefix-list-filter wikimedia4 orlonger;
        }
        then accept;
    }
    term private6 {
        from {
            protocol bgp;
            prefix-list-filter private6 orlonger;
        }
        then accept;
    }
    term public6 {
        from {
            protocol bgp;
            prefix-list-filter wikimedia6 orlonger;
        }
        then accept;
    }
    term reject_other {
        then reject;
    }
}
/* Make sure only internal routes contribute to aggregates, not external ones like other sites */
policy-statement BGP_aggregate_contributors {
    term internal_only {
        from protocol [ local direct static ospf ospf3 ];
        then accept;
    }
    then reject;
}
/* allow only main DC router loopbacks to contribute to aggregates */
policy-statement BGP_aggregate_contributors_eqiad {
    term loopbacks4 {
        from {
            family inet;
            protocol [ local direct static ospf ospf3 ];
            /* cr1-eqiad */
            route-filter 208.80.154.196 exact;
            /* cr2-eqiad */
            route-filter 208.80.154.197/32 exact;
        }
        then accept;
    }
    term loopbacks6 {
        from {
            family inet6;
            protocol [ local direct static ospf ospf3 ];
            /* cr1-eqiad */
            route-filter 2620:0:861:ffff::1/128 exact;
            /* cr2-eqiad */
            route-filter 2620:0:861:ffff::2/128 exact;
        }
        then accept;
    }
    then reject;
}
policy-statement BGP_aggregate_contributors_codfw {
    term loopbacks4 {
        from {
            family inet4;
            protocol [ local direct static ospf ospf3 ];
            /* cr1-codfw */
            route-filter 208.80.153.192/32 exact;
            /* cr2-codfw */
            route-filter 208.80.153.193/32 exact;
        }
        then accept;
    }
    term loopbacks6 {
        from {
            family inet6;
            protocol [ local direct static ospf ospf3 ];
            /* cr1-codfw */
            route-filter 2620:0:860:ffff::1/128 exact;
            /* cr2-codfw */
            route-filter 2620:0:860:ffff::2/128 exact;
        }
        then accept;
    }
    then reject;
}
policy-statement BGP_community_actions {
    term avoid-paths {
        from community AVOIDED_PATH;
        then {
            local-preference 50;
            next policy;
        }
    }
    term peer-internal {
        from community PEER_INTERNAL;
        then {
            local-preference 280;
            next policy;
        }
    }
    term peer-customer {
        from community PEER_CUSTOMER;
        then {
            local-preference 250;
            next policy;
        }
    }
    term peer-private-peer {
        from community PEER_PRIVATE_PEER;
        then {
            local-preference 250;
            next policy;
        }
    }
    term peer {
        from community PEERING_ROUTE;
        then {
            local-preference 250;
            next policy;
        }
    }
    term selected-path {
        from community SELECTED_PATH;
        then {
            local-preference 350;
            next policy;
        }
    }
    term preferred-transit {
        from community PREFERRED_TRANSIT;
        then {
            local-preference 180;
            next policy;
        }
    }
}
policy-statement BGP_outfilter {
    term aggregates_out {
        from {
            protocol aggregate;
            prefix-list bgp-out;
        }
        then accept;
    }
    term customers {
        from community PEER_CUSTOMER;
        then accept;
    }
    then reject;
}
policy-statement BGP_prepend1_out {
    term prepend {
        from {
            protocol aggregate;
            prefix-list bgp-out;
        }
        then as-path-prepend {{ asn }};
    }
}
policy-statement BGP_reject {
    then reject;
}
policy-statement BGP_reset_MED {
    then {
        metric 100;
        next policy;
    }
}
policy-statement BGP_sanitize_in {
    /* reject advertisements that contain private AS numbers. */
    term private-ASN {
        from as-path private;
        then reject;
    }
    term special-ranges4 {
        from {
            family inet;
            prefix-list-filter special-ranges4 orlonger;
        }
        then reject;
    }
    term special-ranges6 {
        from {
            family inet6;
            prefix-list-filter special-ranges6 orlonger;
        }
        then reject;
    }
    /* should be BGP filtered, but not firewalled (thus not special-range) */
    term bogons4 {
        from {
            family inet;
            /* multicast */
            route-filter 224.0.0.0/4 orlonger;
        }
        then reject;
    }
    term bogons6 {
        from {
            family inet6;
            /* RFC4291 (Link Local) */
            route-filter fe80::/10 orlonger;
            /* multicast */
            route-filter ff00::/8 orlonger;
        }
        then reject;
    }
    term teredo_6to4 {
        from {
            family inet6;
            /* Teredo */
            route-filter 2001::/32 longer;
            /* 6to4 */
            route-filter 2002::/16 longer;
        }
        then reject;
    }
    term own-space4 {
        from {
            family inet;
            prefix-list-filter wikimedia4 orlonger;
        }
        then reject;
    }
    term own-space6 {
        from {
            family inet6;
            prefix-list-filter wikimedia6 orlonger;
        }
        then reject;
    }
    term prefix-length4 {
        from {
            family inet;
            route-filter 0.0.0.0/0 exact;
            route-filter 0.0.0.0/0 prefix-length-range /27-/32;
        }
        then reject;
    }
    term prefix-length6 {
        from {
            family inet6;
            route-filter ::/0 exact;
            route-filter ::/0 prefix-length-range /49-/128;
        }
        then reject;
    }
    then {
        origin incomplete;
        community delete AS{{ asn }}:ALL;
        next policy;
    }
}
policy-statement BGP_transit_in {
    term filter {
        from as-path-group AS-PATH-FILTER;
        then reject;
    }
    term avoid-paths {
        from as-path-group AVOID-PATHS;
        then {
            community add AVOIDED_PATH;
        }
    }
    term selected-paths {
        from as-path-group SELECTED-PATHS;
        then {
            community add SELECTED_PATH;
        }
    }
    term preferred-transit {
        from as-path-group PREFERRED-TRANSIT;
        then {
            community add PREFERRED_TRANSIT;
        }
    }
    term classification {
        then {
            community add TRANSIT_ROUTE;
        }
    }
    then {
        community add TRANSIT_ROUTE;
        next policy;
    }
}
policy-statement LVS_import {
    {% if lvs_secondary is defined %}
    term secondary {
        from {
            protocol bgp;
            neighbor [ {{ lvs_secondary|join(' ') }} ];
        }
        then {
            metric add 10;
        }
    }
    {% endif %}
    term service_IPs {
        from {
            family inet;
            protocol bgp;
            prefix-list-filter LVS-service-ips longer;
        }
        then accept;
    }
    term service_IPs6 {
        from {
            family inet6;
            protocol bgp;
            prefix-list-filter LVS-service-ips6 longer;
        }
        then accept;
    }
    then reject;
}
policy-statement NONE {
    then reject;
}
policy-statement load-balance {
    /* The per-packet is legacy language, the hardware only does per-flow load-balancing and this is how you enable it. */
    then {
        load-balance per-packet;
    }
}
policy-statement ospf_export {
    term 1 {
        from protocol direct;
        then {
            external {
                type 1;
            }
            accept;
        }
    }
    term statics {
        from protocol [ static aggregate ];
        then accept;
    }
    then reject;
}
community AS{{ asn }}:ALL members "^{{ asn }}:[0-9]+$";
community AVOIDED_PATH members {{ asn }}:0;
community PARTIAL_TRANSIT_ROUTE members {{ asn }}:5;
community PEERING_ROUTE members {{ asn }}:3;
community PEER_CUSTOMER members {{ asn }}:7;
community PEER_INTERNAL members {{ asn }}:6;
community PEER_PRIVATE_PEER members {{ asn }}:8;
community PEER_PUBLIC_PEER members {{ asn }}:9;
community PREFERRED_TRANSIT members {{ asn }}:10;
community SELECTED_PATH members {{ asn }}:11;
community TRANSIT_ROUTE members {{ asn }}:4;
as-path private 64512-65535;
as-path-group AS-PATH-FILTER {
    as-path NONE 0;
}
{% include "includes/policies/" ~ site ~ "-paths.conf" %}

{% if customers is defined %}
{% for customer in customers %}
{% include "includes/customers/" ~ customer ~ ".policy" %}
{% endfor %}
{% endif %}
