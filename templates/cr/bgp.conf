protocols {
    bgp {
        {% for ipversion in [ null, 6] -%}
        replace: group Transit{{ ipversion | d(4) }} {
            type external;
            log-updown;
            import [ BGP_sanitize_in BGP_transit_in BGP_community_actions ];
            family inet{{ ipversion | d('') }} {
                unicast;
            }
            export BGP{{ ipversion | d('') }}_outfilter;
            remove-private;
            {% for ip, attributes in transits.items() if ip['version'] == ipversion | d(4) -%}
            {% if attributes['disabled'] | d(false) -%}inactive: {% endif %}neighbor {{ ip }} {
                description "{{ attributes['provider'] }}";
                {% if attributes['import_policy'] | d(false) or transit_providers[attributes['provider']]['import_policy'] | d(false)  -%}
                import [ BGP_sanitize_in BGP_transit_in AS{{ transit_providers[attributes['provider']]['AS'] }}_in BGP_community_actions ];
                {% endif %}
                {% if attributes['export_policy'] | d(false) or transit_providers[attributes['provider']]['export_policy'] | d(false) -%}
                export [ AS{{ transit_providers[attributes['provider']]['AS'] }}_out BGP{{ ipversion | d('') }}_outfilter ];
                {% endif %}
                {% if not ipversion | d(false) and transit_providers[attributes['provider']]['flowspec'] | d(false) -%}
                family inet {
                    unicast;
                    flow;
                }
                {% endif %}
                {% if ip in bgp_keys | d({}) -%}
                authentication-key "{{ bgp_keys[ip] }}";
                {% endif %}
                peer-as {{ transit_providers[attributes['provider']]['AS'] }};
                {% if transit_providers[attributes['provider']]['BFD'] | d(false)  -%}
                bfd-liveness-detection {
                    minimum-interval 300;
                }
                {% endif %}
            }
            {% endfor %}
        }
        {% endfor %}
        group IX4 {
            replace: type external;
            replace: log-updown;
            replace: damping;
            replace: import [ BGP_sanitize_in BGP_IXP_in BGP_community_actions ];
            replace: family inet {
                unicast {
                    prefix-limit {
                        maximum 10000;
                        teardown 80 idle-timeout forever;
                    }
                }
            }
            replace: export BGP_outfilter;
            replace: remove-private;
        }
        group IX6 {
            replace: type external;
            replace: log-updown;
            replace: damping;
            replace: import [ BGP_sanitize_in BGP_IXP_in BGP_community_actions ];
            replace: family inet6 {
                unicast {
                    prefix-limit {
                        maximum 4000;
                        teardown 80 idle-timeout forever;
                    }
                }
            }
            replace: export BGP6_outfilter;
            replace: remove-private;
        }
        replace: group PyBal {
        {% if lvs_neighbors | d([])  %}
            type external;
            multihop {
                ttl 2;
            }
            local-address {{ metadata['ip4'] }};
            hold-time 30;
            import LVS_import;
            family inet {
                unicast {
                    prefix-limit {
                        maximum 1000;
                        teardown 20;
                    }
                }
            }
            family inet6 {
                unicast {
                    prefix-limit {
                        maximum 1000;
                        teardown 20;
                    }
                }
            }
            export NONE;
            peer-as 64600;
            {% for hostname, ip in lvs_neighbors.items() | sort() -%}
            neighbor {{ ip }} {
                description {{ hostname }};
            }
            {% endfor %}
        {% endif %}
        }
        replace: group Netflow {
            type internal;
            local-address {{ metadata['ip4'] }};
            import BGP_reject;
            family inet {
                any;
            }
            family inet6 {
                any;
            }
            peer-as {{ confed }};
            local-as {{ confed }} no-prepend-global-as;
            cluster {{ metadata['ip4'] }};
            neighbor {{ sampling.collector }};
        }
    }
}
